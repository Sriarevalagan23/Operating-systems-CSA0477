#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

#define PHILOSOPHERS 5

pthread_mutex_t forks[PHILOSOPHERS];

void* philosopher(void* num) {
    int id = *(int*)num;
    while (1) {
        pthread_mutex_lock(&forks[id]);
        pthread_mutex_lock(&forks[(id + 1) % PHILOSOPHERS]);
        
        printf("Philosopher %d is eating\n", id);
        sleep(1);  // Simulate eating
        
        pthread_mutex_unlock(&forks[(id + 1) % PHILOSOPHERS]);
        pthread_mutex_unlock(&forks[id]);
        
        printf("Philosopher %d is thinking\n", id);
        sleep(1);  // Simulate thinking
    }
    return NULL;
}

int main() {
    pthread_t threads[PHILOSOPHERS];
    int ids[PHILOSOPHERS];
    
    for (int i = 0; i < PHILOSOPHERS; i++) pthread_mutex_init(&forks[i], NULL);
    for (int i = 0; i < PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &ids[i]);
    }
    for (int i = 0; i < PHILOSOPHERS; i++) pthread_join(threads[i], NULL);
    return 0;
}
