#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_BLOCKS 5

// Structure to represent a single block on the disk
typedef struct DiskBlock {
    char data[50];          // Data of the block
    struct DiskBlock* next; // Pointer to the next block
} DiskBlock;

// Structure to represent a file in the directory
typedef struct File {
    DiskBlock* firstBlock;  // Pointer to the first block
    DiskBlock* lastBlock;   // Pointer to the last block
} File;

// Function to create a new block
DiskBlock* create_block(const char* data) {
    DiskBlock* newBlock = (DiskBlock*)malloc(sizeof(DiskBlock));
    strcpy(newBlock->data, data);
    newBlock->next = NULL;
    return newBlock;
}

// Function to simulate the write operation (linked allocation)
void write_file(File* file) {
    char* predefined_data[MAX_BLOCKS] = {
        "Data for Block 1",
        "Data for Block 2",
        "Data for Block 3",
        "Data for Block 4",
        "Data for Block 5"
    };

    DiskBlock* current = NULL;
    
    // Write data to the file (creating new blocks and linking them)
    for (int i = 0; i < MAX_BLOCKS; i++) {
        DiskBlock* newBlock = create_block(predefined_data[i]);

        if (i == 0) {
            file->firstBlock = newBlock;  // First block of the file
        } else {
            current->next = newBlock;     // Link the previous block to the new one
        }

        current = newBlock;              // Move the current pointer to the new block
    }
    file->lastBlock = current;  // Last block of the file
}

// Function to read and display the file data using linked allocation
void read_file(File file) {
    DiskBlock* current = file.firstBlock;
    printf("\nReading File Blocks:\n");

    while (current != NULL) {
        printf("%s\n", current->data);
        current = current->next;
    }
}

int main() {
    File file = {NULL, NULL};  // Initialize the file with no blocks

    // Simulate writing data to the file
    write_file(&file);

    // Display the file data using linked allocation
    int choice;
    do {
        printf("\n1. Display all blocks\n2. Read file blocks\n3. Exit\nChoice: ");
        scanf("%d", &choice);
        getchar();  // To consume the newline character after scanf

        switch(choice) {
            case 1: 
                printf("\nFile Blocks:\n");
                read_file(file);
                break;
            case 2:
                read_file(file);
                break;
            case 3:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Try again.\n");
        }
    } while(choice != 3);

    return 0;
}
