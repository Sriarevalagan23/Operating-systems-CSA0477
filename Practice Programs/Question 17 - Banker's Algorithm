#include <stdio.h>
#include <stdbool.h>
#define P 5  
#define R 3  
int available[] = {3, 3, 2};

int max[][R] = {
    {7, 5, 3}, 
    {3, 2, 2},  
    {9, 0, 2},  
    {2, 2, 2},  
    {4, 3, 3}  
};

int allot[][R] = {
    {0, 1, 0},  
    {2, 0, 0},  
    {3, 0, 2},  
    {2, 1, 1},  
    {0, 0, 2}   
};


int need[P][R];

void calc_need() {
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - allot[i][j];
        }
    }
}

bool is_safe(int work[], bool finish[], int safe_sequence[]) {
    int count = 0;
    while (count < P) {
        bool found = false;
        for (int i = 0; i < P; i++) {
            if (!finish[i]) {
                bool can_run = true;
                for (int j = 0; j < R; j++) {
                    if (need[i][j] > work[j]) {
                        can_run = false;
                        break;
                    }
                }
                if (can_run) {
                    for (int j = 0; j < R; j++) {
                        work[j] += allot[i][j];
                    }
                    finish[i] = true;
                    safe_sequence[count++] = i;
                    found = true;
                }
            }
        }
        if (!found) return false; // No process can finish, unsafe state
    }
    return true; // Safe state
}

int main() {
    calc_need();

    int work[R];
    bool finish[P] = {false};
    int safe_sequence[P];

    for (int i = 0; i < R; i++) {
        work[i] = available[i];
    }

    if (is_safe(work, finish, safe_sequence)) {
        printf("The system is in a safe state.\n");
        printf("Safe sequence: ");
        for (int i = 0; i < P; i++) {
            printf("P%d ", safe_sequence[i]);
        }
        printf("\n");
    } else {
        printf("The system is not in a safe state.\n");
    }

    return 0;
}
