#include <stdio.h>
#include <stdbool.h>

int main() {
    int n = 5, m = 3;
    int allocation[5][3] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};
    int max[5][3] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
    int available[3] = {3, 3, 2}, need[5][3];
    int safe_sequence[5], index = 0;
    bool finish[5] = {false};

    // Calculate Need matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Banker's Algorithm
    for (int count = 0; count < n; count++) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                bool can_allocate = true;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > available[j]) {
                        can_allocate = false;
                        break;
                    }
                }
                if (can_allocate) {
                    for (int j = 0; j < m; j++) {
                        available[j] += allocation[i][j];  // Release resources
                    }
                    safe_sequence[index++] = i;
                    finish[i] = true;
                    found = true;
                    break;  // Exit the inner loop and move to the next count
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return 0;  // Exit if no process can be completed
        }
    }

    // Output the safe sequence
    printf("System is in a safe state. Safe sequence is:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d ", safe_sequence[i]);
    }
    printf("\n");

    return 0;
}
