#include <stdio.h>

#define BLOCKS 5
#define PROCESSES 4

void worstFit(int blocks[], int processes[]) {
    int allocation[PROCESSES];

    for (int i = 0; i < PROCESSES; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < PROCESSES; i++) {
        int maxIndex = -1;
        for (int j = 0; j < BLOCKS; j++) {
            if (blocks[j] >= processes[i] && (maxIndex == -1 || blocks[j] > blocks[maxIndex])) {
                maxIndex = j;
            }
        }
        if (maxIndex != -1) {
            allocation[i] = maxIndex;
            blocks[maxIndex] -= processes[i];
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock No.\tRemaining Block Size\n");
    for (int i = 0; i < PROCESSES; i++) {
        if (allocation[i] != -1)
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        else
            printf("%d\t\t%d\t\tNot Allocated\n", i + 1, processes[i]);
    }
}

int main() {
    int blocks[BLOCKS] = {100, 500, 200, 300, 600};
    int processes[PROCESSES] = {212, 417, 112, 426};

    worstFit(blocks, processes);
    return 0;
}
