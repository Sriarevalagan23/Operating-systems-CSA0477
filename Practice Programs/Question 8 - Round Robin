#include <stdio.h>

struct Process { int pid, bt, at, remaining_bt, wt, tat; };

void roundRobin(struct Process proc[], int n, int quantum) {
    int time = 0, completed = 0;
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (proc[i].remaining_bt > 0) {
                if (proc[i].remaining_bt > quantum) {
                    time += quantum;
                    proc[i].remaining_bt -= quantum;
                } else {
                    time += proc[i].remaining_bt;
                    proc[i].wt = time - proc[i].at - proc[i].bt;
                    proc[i].tat = time - proc[i].at;
                    proc[i].remaining_bt = 0;
                    completed++;
                }
            }
        }
    }
}

int main() {
    int n = 4, quantum = 4;
    struct Process proc[] = {{1, 6, 0, 6}, {2, 8, 1, 8}, {3, 7, 2, 7}, {4, 3, 3, 3}};
    
    roundRobin(proc, n, quantum);

    int total_wt = 0, total_tat = 0;
    printf("PID\tBT\tAT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        total_wt += proc[i].wt;
        total_tat += proc[i].tat;
        printf("P%d\t%d\t%d\t%d\t%d\n", proc[i].pid, proc[i].bt, proc[i].at, proc[i].wt, proc[i].tat);
    }

    printf("Avg WT: %.2f, Avg TAT: %.2f\n", (float)total_wt / n, (float)total_tat / n);
    return 0;
}
